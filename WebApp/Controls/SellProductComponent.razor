@inject UseCases.IGetProductByIdUseCase GetProductByIdUseCase
@inject UseCases.ISellProductUseCase SellProductUseCase

@if (productToSave is not null)
{
    
    <EditForm Model="productToSave" OnValidSubmit="SellProduct">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        @if (!string.IsNullOrEmpty(errorMsg))
        {
            <div class="alert alert-danger alert-dismissible">
                <a href="javascript:void(0)" class="close" data-dismiss="alert" aria-label="close">&times;</a>
                <strong>Error!</strong> @errorMsg
            </div>
        }
        <div class="form-group">
            <label for="name">Product Name</label>
            <input type="text" id="name" readonly class="form-control" value="@productToSave.Name" />
        </div>
        <div class="form-group">
            <label for="price">Product Price</label>
            <input type="text" id="price" readonly class="form-control" value="@(string.Format("{0:c}", productToSave.Price))" />
        </div>
        <div class="form-group">
            <label for="qty">Quantity</label>
            <InputNumber class="form-control" @bind-Value="@productToSave.Quantity" id="qty"></InputNumber>
        </div>
        <div class="form-group">
            <button type="submit" class="btn btn-sm btn-primary">Sell</button>
        </div>

    </EditForm>

}

@code {

    [Parameter]
    public string CashierName { get; set; }

    [Parameter]
    public EventCallback<Product> OnProductSold { get; set; }

    [Parameter]
    public Product SelectedProduct { get; set; }

    private Product productToSave;
    private string errorMsg;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (SelectedProduct is not null)
        {
            productToSave = new Product()
            {
                ProductId = SelectedProduct.ProductId,
                Name = SelectedProduct.Name,
                CategoryId = SelectedProduct.CategoryId,
                Price = SelectedProduct.Price,
                Quantity = 0
            };
        }
        else
        {
            productToSave = null;
        }
    }

    private void SellProduct()
    {
        if (string.IsNullOrWhiteSpace(CashierName))
        {
            errorMsg = "Cashier's name is missing. Cannot sell product";
            return;
        }

        var product = GetProductByIdUseCase.Execute(productToSave.ProductId);
        if (productToSave.Quantity <= 0)
        {
            errorMsg = "The quatity must greater than zero";
        }
        else if (product.Quantity >= productToSave.Quantity)
        {
            OnProductSold.InvokeAsync(productToSave);
            errorMsg = string.Empty;

            SellProductUseCase.Execute(CashierName, productToSave.ProductId, productToSave.Quantity.Value);
        }
        else
        {
            errorMsg = $"{product.Name} only has {product.Quantity} left. It's not enough!";
        }

    }
}
